diff --git a/include/igl/HalfEdgeIterator.h b/include/igl/HalfEdgeIterator.h
index 9a4658c..be59f83 100644
--- a/include/igl/HalfEdgeIterator.h
+++ b/include/igl/HalfEdgeIterator.h
@@ -70,9 +70,9 @@ namespace igl
       const HalfEdgeIterator& other)
       : F(_F),FF(_FF),FFi(_FFi)
     {
-      state.fi = _fi;
-      state.ei = _ei;
-      state.reverse = _reverse;
+      state.fi = other._fi;
+      state.ei = other._ei;
+      state.reverse = other._reverse;
       state.boundary = false;
       HE_ITER_DEBUG("Constructor");
     }
diff --git a/include/igl/cut_mesh_simple.cpp b/include/igl/cut_mesh_simple.cpp
index 2cab778..b54c105 100644
--- a/include/igl/cut_mesh_simple.cpp
+++ b/include/igl/cut_mesh_simple.cpp
@@ -12,6 +12,7 @@
 #include <igl/HalfEdgeIterator.h>
 
 #include <map>
+#include <iostream>
 
 namespace igl
 {
@@ -20,7 +21,7 @@ namespace igl
                 Eigen::MatrixBase<DerivedI>& F,
                 const std::vector<typename DerivedI::Scalar>& cut)
   {
-    std::vector<std::vector<DerivedI::Scalar>> cutVertices;
+    std::vector<std::vector<typename DerivedI::Scalar>> cutVertices;
     cut_mesh(V.derived(),F.derived(),cut,cutVertices);
   }
 
@@ -41,7 +42,7 @@ namespace igl
                 std::vector<std::vector<typename DerivedI::Scalar>>& cutVertices,
                 std::vector<int>& cutVerticesLink)
   {
-    std::vector<std::vector<DerivedI::Scalar>> cuts;
+    std::vector<std::vector<typename DerivedI::Scalar>> cuts;
     cuts.push_back(cut);
     std::vector<std::vector<int>> cutVerticesLinkTemp;
     cut_mesh<DerivedS,DerivedI>(V.derived(),F.derived(),cuts,cutVertices,cutVerticesLinkTemp);
@@ -57,7 +58,7 @@ namespace igl
                 std::vector<std::vector<typename DerivedI::Scalar>>& cutHalfedges,
                 std::vector<int>& cutHalfedgesLink)
   {
-    std::vector<std::vector<DerivedI::Scalar>> cuts;
+    std::vector<std::vector<typename DerivedI::Scalar>> cuts;
     cuts.push_back(cut);
     std::vector<std::vector<int>> cutVerticesLinkTemp;
     std::vector<std::vector<int>> cutHalfedgesLinkTemp;
@@ -100,8 +101,8 @@ namespace igl
 
     std::map<int,int> cutHalfEdgesLinks;
     std::map<std::pair<int,int>,int> cutHalfEdgesPairLinks;
-    std::vector<DerivedI::Scalar> cutVerexIds;
-    std::vector<igl::HalfEdgeIterator<DerivedI>::State> cutHalfIter;
+    std::vector<typename DerivedI::Scalar> cutVerexIds;
+    std::vector<typename igl::HalfEdgeIterator<DerivedI>::State> cutHalfIter;
     for(auto c : cuts)
     {
       if(c.size() == 0)
@@ -149,7 +150,7 @@ namespace igl
         auto ith = cutHalfEdgesPairLinks.insert({{vA,vB},-1});
         if(ith.second)
         {
-          cutHalfedges.push_back(std::vector<DerivedI::Scalar>(4));
+          cutHalfedges.push_back(std::vector<typename DerivedI::Scalar>(4));
           cutHalfedges.back()[0] = heIter.Fi();
           cutHalfedges.back()[1] = heIter.Ei();
           cutHalfedges.back()[2] = heIter.Fif();
diff --git a/include/igl/triangle_triangle_adjacency.cpp b/include/igl/triangle_triangle_adjacency.cpp
index 0fa562b..0c78d8e 100644
--- a/include/igl/triangle_triangle_adjacency.cpp
+++ b/include/igl/triangle_triangle_adjacency.cpp
@@ -207,6 +207,7 @@ template <
 
 #ifdef IGL_STATIC_LIBRARY
 // Explicit template instantiation
+template void igl::triangle_triangle_adjacency<Eigen::Matrix<double, -1, -1, 0, -1, -1>, long, long>(Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1, 0, -1, -1> > const&, std::vector<std::vector<std::vector<long, std::allocator<long> >, std::allocator<std::vector<long, std::allocator<long> > > >, std::allocator<std::vector<std::vector<long, std::allocator<long> >, std::allocator<std::vector<long, std::allocator<long> > > > > >&, std::vector<std::vector<std::vector<long, std::allocator<long> >, std::allocator<std::vector<long, std::allocator<long> > > >, std::allocator<std::vector<std::vector<long, std::allocator<long> >, std::allocator<std::vector<long, std::allocator<long> > > > > >&);
 // generated by autoexplicit.sh
 template void igl::triangle_triangle_adjacency<Eigen::Matrix<int, -1, 3, 0, -1, 3>, Eigen::Matrix<int, -1, -1, 0, -1, -1>, Eigen::Matrix<int, -1, -1, 0, -1, -1> >(Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 3, 0, -1, 3> > const&, Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1, 0, -1, -1> >&, Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1, 0, -1, -1> >&);
 // generated by autoexplicit.sh
diff --git a/include/igl/unproject_in_mesh.cpp b/include/igl/unproject_in_mesh.cpp
index 6238aaf..847d339 100644
--- a/include/igl/unproject_in_mesh.cpp
+++ b/include/igl/unproject_in_mesh.cpp
@@ -90,6 +90,7 @@ template < typename DerivedV, typename DerivedF, typename Derivedobj>
   return unproject_in_mesh(pos,model,proj,viewport,V,F,obj,hits);
 }
 #ifdef IGL_STATIC_LIBRARY
+template int igl::unproject_in_mesh<Eigen::Matrix<double, -1, -1, 0, -1, -1>, Eigen::Matrix<int, -1, -1, 0, -1, -1>, Eigen::Matrix<double, 1, 3, 1, 1, 3> >(Eigen::Matrix<float, 2, 1, 0, 2, 1> const&, Eigen::Matrix<float, 4, 4, 0, 4, 4> const&, Eigen::Matrix<float, 4, 4, 0, 4, 4> const&, Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1, 0, -1, -1> > const&, Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1, 0, -1, -1> > const&, Eigen::PlainObjectBase<Eigen::Matrix<double, 1, 3, 1, 1, 3> >&, std::vector<igl::Hit, std::allocator<igl::Hit> >&);
 template int igl::unproject_in_mesh<Eigen::Matrix<double, 1, 3, 1, 1, 3> >(Eigen::Matrix<float, 2, 1, 0, 2, 1> const&, Eigen::Matrix<float, 4, 4, 0, 4, 4> const&, Eigen::Matrix<float, 4, 4, 0, 4, 4> const&, Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, std::function<void (Eigen::Matrix<float, 3, 1, 0, 3, 1> const&, Eigen::Matrix<float, 3, 1, 0, 3, 1> const&, std::vector<igl::Hit, std::allocator<igl::Hit> >&)> const&, Eigen::PlainObjectBase<Eigen::Matrix<double, 1, 3, 1, 1, 3> >&, std::vector<igl::Hit, std::allocator<igl::Hit> >&);
 template int igl::unproject_in_mesh<Eigen::Matrix<double, 3, 1, 0, 3, 1> >(Eigen::Matrix<float, 2, 1, 0, 2, 1> const&, Eigen::Matrix<float, 4, 4, 0, 4, 4> const&, Eigen::Matrix<float, 4, 4, 0, 4, 4> const&, Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, std::function<void (Eigen::Matrix<float, 3, 1, 0, 3, 1> const&, Eigen::Matrix<float, 3, 1, 0, 3, 1> const&, std::vector<igl::Hit, std::allocator<igl::Hit> >&)> const&, Eigen::PlainObjectBase<Eigen::Matrix<double, 3, 1, 0, 3, 1> >&, std::vector<igl::Hit, std::allocator<igl::Hit> >&);
 template int igl::unproject_in_mesh<Eigen::Matrix<double, -1, -1, 0, -1, -1> >(Eigen::Matrix<float, 2, 1, 0, 2, 1> const&, Eigen::Matrix<float, 4, 4, 0, 4, 4> const&, Eigen::Matrix<float, 4, 4, 0, 4, 4> const&, Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, std::function<void (Eigen::Matrix<float, 3, 1, 0, 3, 1> const&, Eigen::Matrix<float, 3, 1, 0, 3, 1> const&, std::vector<igl::Hit, std::allocator<igl::Hit> >&)> const&, Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1, 0, -1, -1> >&, std::vector<igl::Hit, std::allocator<igl::Hit> >&);
diff --git a/shared/cmake/CMakeLists.txt b/shared/cmake/CMakeLists.txt
index d16edf2..8f8de2a 100644
--- a/shared/cmake/CMakeLists.txt
+++ b/shared/cmake/CMakeLists.txt
@@ -405,13 +405,13 @@ if(LIBIGL_WITH_OPENGL)
           target_compile_definitions(igl_viewer PRIVATE -DIGL_VIEWER_WITH_NANOGUI)
         endif()
         if(LIBIGL_VIEWER_WITH_NANOGUI_MULTIMESH)
-          target_compile_definitions(iglviewer PRIVATE -DIGL_VIEWER_WITH_NANOGUI_MULTIMESH)
+          target_compile_definitions(igl_viewer PRIVATE -DIGL_VIEWER_WITH_NANOGUI_MULTIMESH)
         endif()
         if(LIBIGL_VIEWER_WITH_NANOGUI_IO)
-          target_compile_definitions(iglviewer PRIVATE -DIGL_VIEWER_WITH_NANOGUI_IO)
+          target_compile_definitions(igl_viewer PRIVATE -DIGL_VIEWER_WITH_NANOGUI_IO)
         endif()
         if(LIBIGL_VIEWER_WITH_NANOGUI_SERIALIZATION)
-          target_compile_definitions(iglviewer PRIVATE -DIGL_VIEWER_WITH_NANOGUI_SERIALIZATION)
+          target_compile_definitions(igl_viewer PRIVATE -DIGL_VIEWER_WITH_NANOGUI_SERIALIZATION)
         endif()
         target_include_directories(igl_viewer PRIVATE ${VIEWER_INCLUDE_DIRS})
         if(NOT APPLE)
